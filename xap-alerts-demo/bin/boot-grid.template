{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "AWS CloudFormation Template, that creates one EC2 instance for service grid management components: 1 GSA, 1 LUS, 1 GSM and 1 WEB UI and requested count of EC2 instances for compute primary and backup nodes with one running GSC per node.",
  "Parameters": {
    "MgtNodeInstanceType": {
      "Description": "EC2 instance type of management node",
      "Type": "String",
      "Default": "t2.micro",
      "AllowedValues": [
        "t1.micro",
        "t2.nano",
        "t2.micro",
        "t2.small",
        "t2.medium",
        "t2.large",
        "m1.small",
        "m1.medium",
        "m1.large",
        "m1.xlarge",
        "m2.xlarge",
        "m2.2xlarge",
        "m2.4xlarge",
        "m3.medium",
        "m3.large",
        "m3.xlarge",
        "m3.2xlarge",
        "m4.large",
        "m4.xlarge",
        "m4.2xlarge",
        "m4.4xlarge",
        "m4.10xlarge",
        "c1.medium",
        "c1.xlarge",
        "c3.large",
        "c3.xlarge",
        "c3.2xlarge",
        "c3.4xlarge",
        "c3.8xlarge",
        "c4.large",
        "c4.xlarge",
        "c4.2xlarge",
        "c4.4xlarge",
        "c4.8xlarge",
        "g2.2xlarge",
        "g2.8xlarge",
        "r3.large",
        "r3.xlarge",
        "r3.2xlarge",
        "r3.4xlarge",
        "r3.8xlarge",
        "i2.xlarge",
        "i2.2xlarge",
        "i2.4xlarge",
        "i2.8xlarge",
        "d2.xlarge",
        "d2.2xlarge",
        "d2.4xlarge",
        "d2.8xlarge",
        "hi1.4xlarge",
        "hs1.8xlarge",
        "cr1.8xlarge",
        "cc2.8xlarge",
        "cg1.4xlarge"
      ],
      "ConstraintDescription": "must be a valid EC2 instance type."
    },
    "MgtNodeSize": {
      "Description": "Size of the EC2 root volume for management node",
      "Type": "Number",
      "Default": "8",
      "MinValue": "0",
      "ConstraintDescription": "must be the size of the EC2 root volume."
    },
    "ComputeNodeInstanceType": {
      "Description": "EC2 instance type of compute node",
      "Type": "String",
      "Default": "t2.micro",
      "AllowedValues": [
        "t1.micro",
        "t2.nano",
        "t2.micro",
        "t2.small",
        "t2.medium",
        "t2.large",
        "m1.small",
        "m1.medium",
        "m1.large",
        "m1.xlarge",
        "m2.xlarge",
        "m2.2xlarge",
        "m2.4xlarge",
        "m3.medium",
        "m3.large",
        "m3.xlarge",
        "m3.2xlarge",
        "m4.large",
        "m4.xlarge",
        "m4.2xlarge",
        "m4.4xlarge",
        "m4.10xlarge",
        "c1.medium",
        "c1.xlarge",
        "c3.large",
        "c3.xlarge",
        "c3.2xlarge",
        "c3.4xlarge",
        "c3.8xlarge",
        "c4.large",
        "c4.xlarge",
        "c4.2xlarge",
        "c4.4xlarge",
        "c4.8xlarge",
        "g2.2xlarge",
        "g2.8xlarge",
        "r3.large",
        "r3.xlarge",
        "r3.2xlarge",
        "r3.4xlarge",
        "r3.8xlarge",
        "i2.xlarge",
        "i2.2xlarge",
        "i2.4xlarge",
        "i2.8xlarge",
        "d2.xlarge",
        "d2.2xlarge",
        "d2.4xlarge",
        "d2.8xlarge",
        "hi1.4xlarge",
        "hs1.8xlarge",
        "cr1.8xlarge",
        "cc2.8xlarge",
        "cg1.4xlarge"
      ],
      "ConstraintDescription": "must be a valid EC2 instance type."
    },
    "ComputeNodeSize": {
      "Description": "Size of the EC2 root volume for compute node",
      "Type": "Number",
      "Default": "8",
      "MinValue": "0",
      "ConstraintDescription": "must be the size of the EC2 root volume."
    },
    "ComputeNodesCount": {
      "Description": "Count of EC2 instances that run one GSC per instance.",
      "Type": "Number",
      "Default": "1",
      "MinValue": "0",
      "ConstraintDescription": "must be a positive number or 0"
    },
    "LookupGroups": {
      "Description": "Lookup group, may be any string",
      "Type": "String",
      "Default": "gigaspaces-xap-premium-10.2.1-ga"
    },
    "KeyName": {
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instance",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Default": "fe-shared",
      "ConstraintDescription": "must be the name of an existing EC2 KeyPair."
    },
    "ImageId": {
      "Description": "Id of an existing image",
      "Type": "String",
      "Default": "ami-d2bb44bf",
      "ConstraintDescription": "must be the id of an existing AMI."
    },
    "SecurityGroupId": {
      "Description": "Id of an existing security group",
      "Type": "String",
      "Default": "sg-78022a1c",
      "ConstraintDescription": "must be the id of an existing security group."
    },
    "SubnetId": {
      "Description": "Id of an existing subnet",
      "Type": "String",
      "Default": "subnet-ef88edb6",
      "ConstraintDescription": "must be the id of an existing subnet."
    }
  },
  "Mappings": {
    "AmiBlockDevice": {
      "ami-d2bb44bf": {
        "root": "/dev/sda1"
      }
    }
  },
  "Resources": {
    "ManagementNode": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "AvailabilityZone": "us-east-1d",
        "InstanceType": {
          "Ref": "MgtNodeInstanceType"
        },
        "SecurityGroupIds": [
          {
            "Ref": "SecurityGroupId"
          }
        ],
        "KeyName": {
          "Ref": "KeyName"
        },
        "ImageId": {
          "Ref": "ImageId"
        },
        "SubnetId": {
          "Ref": "SubnetId"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "Management Node"
          }
        ],
        "BlockDeviceMappings": [
          {
            "DeviceName": {
              "Fn::FindInMap": [
                "AmiBlockDevice",
                {
                  "Ref": "ImageId"
                },
                "root"
              ]
            },
            "Ebs": {
              "VolumeSize": {
                "Ref": "MgtNodeSize"
              }
            }
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -xe\n",
                "add-apt-repository -y ppa:openjdk-r/ppa\n",
                "apt-get update\n",
                "apt-get -y install python-pip\n",
                "pip install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz\n",
                "cp /usr/local/init/ubuntu/cfn-hup /etc/init.d/cfn-hup \n",
                "chmod +x /etc/init.d/cfn-hup \n",
                "update-rc.d cfn-hup defaults \n ",
                "service cfn-hup start \n",
                "cfn-init -v ",
                "         --stack ",
                {
                  "Ref": "AWS::StackName"
                },
                "         --resource ManagementNode ",
                "         --region ",
                {
                  "Ref": "AWS::Region"
                },
                "\n",
                "cfn-signal -e $? ",
                "         --stack ",
                {
                  "Ref": "AWS::StackName"
                },
                "         --resource ManagementNode ",
                "         --region ",
                {
                  "Ref": "AWS::Region"
                },
                "\n"
              ]
            ]
          }
        }
      },
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "config": {
            "packages": {
              "apt": {
                "zip": []
              }
            },
            "groups": {},
            "users": {},
            "sources": {},
            "files": {
              "/tmp/start-mgt-node": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "#!/bin/bash -xe\n",
                      "cd /opt/gigaspaces/gigaspaces-xap-premium-10.2.1-ga/scripts\n",
                      "ip_addr=$(curl --silent http://169.254.169.254/latest/meta-data/local-ipv4)\n",
                      ". configure.sh",
                      " --groups ",
                      {
                        "Ref": "LookupGroups"
                      },
                      " --locators ${ip_addr}:4174",
                      " --nic-address ${ip_addr}\n",
                      "./start-mgt.sh\n",
                      "./start-webui.sh\n"
                    ]
                  ]
                },
                "mode": "000755",
                "owner": "ubuntu",
                "group": "ubuntu"
              }
            },
            "commands": {
              "start_mgt_node": {
                "command": "sudo -u ubuntu /tmp/start-mgt-node"
              }
            },
            "services": {}
          }
        }
      },
      "CreationPolicy": {
        "ResourceSignal": {
          "Timeout": "PT5M"
        }
      }
    },
    "ComputeNode1": {
      "Type": "AWS::EC2::Instance",
      "DependsOn": "ManagementNode",
      "Properties": {
        "AvailabilityZone": "us-east-1d",
        "InstanceType": {
          "Ref": "ComputeNodeInstanceType"
        },
        "SecurityGroupIds": [
          {
            "Ref": "SecurityGroupId"
          }
        ],
        "KeyName": {
          "Ref": "KeyName"
        },
        "ImageId": {
          "Ref": "ImageId"
        },
        "SubnetId": {
          "Ref": "SubnetId"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "Compute Node"
          }
        ],
        "BlockDeviceMappings": [
          {
            "DeviceName": {
              "Fn::FindInMap": [
                "AmiBlockDevice",
                {
                  "Ref": "ImageId"
                },
                "root"
              ]
            },
            "Ebs": {
              "VolumeSize": {
                "Ref": "ComputeNodeSize"
              }
            }
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -xe\n",
                "add-apt-repository -y ppa:openjdk-r/ppa\n",
                "apt-get update\n",
                "apt-get -y install python-pip\n",
                "pip install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz\n",
                "cp /usr/local/init/ubuntu/cfn-hup /etc/init.d/cfn-hup \n",
                "chmod +x /etc/init.d/cfn-hup \n",
                "update-rc.d cfn-hup defaults \n ",
                "service cfn-hup start \n",
                "cfn-init -v ",
                "         --stack ",
                {
                  "Ref": "AWS::StackName"
                },
                "         --resource ComputeNode1 ",
                "         --region ",
                {
                  "Ref": "AWS::Region"
                },
                "\n",
                "cfn-signal -e $? ",
                "         --stack ",
                {
                  "Ref": "AWS::StackName"
                },
                "         --resource ComputeNode1 ",
                "         --region ",
                {
                  "Ref": "AWS::Region"
                },
                "\n",
                "apt-get install stress"
              ]
            ]
          }
        }
      },
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "config": {
            "packages": {
              "apt": {
                "zip": []
              }
            },
            "groups": {},
            "users": {},
            "sources": {},
            "files": {
              "/tmp/start-compute-node": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "#!/bin/bash -xe\n",
                      "cd /opt/gigaspaces/gigaspaces-xap-premium-10.2.1-ga/scripts\n",
                      "ip_addr=$(curl --silent http://169.254.169.254/latest/meta-data/local-ipv4)\n",
                      ". configure.sh",
                      " --groups ",
                      {
                        "Ref": "LookupGroups"
                      },
                      " --locators ",
                      {
                        "Fn::GetAtt": [
                          "ManagementNode",
                          "PrivateIp"
                        ]
                      },
                      ":4174",
                      " --nic-address ${ip_addr}\n",
                      "./start-gscs.sh 1\n"
                    ]
                  ]
                },
                "mode": "000755",
                "owner": "ubuntu",
                "group": "ubuntu"
              }
            },
            "commands": {
              "start_compute_node": {
                "command": "sudo -u ubuntu /tmp/start-compute-node"
              }
            },
            "services": {}
          }
        }
      },
      "CreationPolicy": {
        "ResourceSignal": {
          "Timeout": "PT5M"
        }
      }
    },
    "ComputeNode2": {
      "Type": "AWS::EC2::Instance",
      "DependsOn": "ManagementNode",
      "Properties": {
        "AvailabilityZone": "us-east-1d",
        "InstanceType": {
          "Ref": "ComputeNodeInstanceType"
        },
        "SecurityGroupIds": [
          {
            "Ref": "SecurityGroupId"
          }
        ],
        "KeyName": {
          "Ref": "KeyName"
        },
        "ImageId": {
          "Ref": "ImageId"
        },
        "SubnetId": {
          "Ref": "SubnetId"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "Compute Node"
          }
        ],
        "BlockDeviceMappings": [
          {
            "DeviceName": {
              "Fn::FindInMap": [
                "AmiBlockDevice",
                {
                  "Ref": "ImageId"
                },
                "root"
              ]
            },
            "Ebs": {
              "VolumeSize": {
                "Ref": "ComputeNodeSize"
              }
            }
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -xe\n",
                "add-apt-repository -y ppa:openjdk-r/ppa\n",
                "apt-get update\n",
                "apt-get -y install python-pip\n",
                "pip install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz\n",
                "cp /usr/local/init/ubuntu/cfn-hup /etc/init.d/cfn-hup \n",
                "chmod +x /etc/init.d/cfn-hup \n",
                "update-rc.d cfn-hup defaults \n ",
                "service cfn-hup start \n",
                "cfn-init -v ",
                "         --stack ",
                {
                  "Ref": "AWS::StackName"
                },
                "         --resource ComputeNode2 ",
                "         --region ",
                {
                  "Ref": "AWS::Region"
                },
                "\n",
                "cfn-signal -e $? ",
                "         --stack ",
                {
                  "Ref": "AWS::StackName"
                },
                "         --resource ComputeNode2 ",
                "         --region ",
                {
                  "Ref": "AWS::Region"
                },
                "\n",
                "apt-get install stress"
              ]
            ]
          }
        }
      },
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "config": {
            "packages": {
              "apt": {
                "zip": []
              }
            },
            "groups": {},
            "users": {},
            "sources": {},
            "files": {
              "/tmp/start-compute-node": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "#!/bin/bash -xe\n",
                      "cd /opt/gigaspaces/gigaspaces-xap-premium-10.2.1-ga/scripts\n",
                      "ip_addr=$(curl --silent http://169.254.169.254/latest/meta-data/local-ipv4)\n",
                      ". configure.sh",
                      " --groups ",
                      {
                        "Ref": "LookupGroups"
                      },
                      " --locators ",
                      {
                        "Fn::GetAtt": [
                          "ManagementNode",
                          "PrivateIp"
                        ]
                      },
                      ":4174",
                      " --nic-address ${ip_addr}\n",
                      "./start-gscs.sh 1\n"
                    ]
                  ]
                },
                "mode": "000755",
                "owner": "ubuntu",
                "group": "ubuntu"
              }
            },
            "commands": {
              "start_compute_node": {
                "command": "sudo -u ubuntu /tmp/start-compute-node"
              }
            },
            "services": {}
          }
        }
      },
      "CreationPolicy": {
        "ResourceSignal": {
          "Timeout": "PT5M"
        }
      }
    }
  },
  "Outputs": {
    "MgtInstanceId": {
      "Description": "InstanceId of the newly created Management Node",
      "Value": {
        "Ref": "ManagementNode"
      }
    },
    "MgtPrivateIP": {
      "Description": "Private IP address of the newly created Management Node",
      "Value": {
        "Fn::GetAtt": [
          "ManagementNode",
          "PrivateIp"
        ]
      }
    },
    "ComputeNode1InstanceId": {
      "Description": "InstanceId of the newly created Compute Node",
      "Value": {
        "Ref": "ComputeNode1"
      }
    },
    "ComputeNode1PrivateIP": {
      "Description": "Private IP address of the newly created Compute Node",
      "Value": {
        "Fn::GetAtt": [
          "ComputeNode1",
          "PrivateIp"
        ]
      }
    },
    "ComputeNode2InstanceId": {
      "Description": "InstanceId of the newly created Compute Node",
      "Value": {
        "Ref": "ComputeNode2"
      }
    },
    "ComputeNode2PrivateIP": {
      "Description": "Private IP address of the newly created Compute Node",
      "Value": {
        "Fn::GetAtt": [
          "ComputeNode2",
          "PrivateIp"
        ]
      }
    }
  }
}